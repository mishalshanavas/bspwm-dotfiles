;; Polls
(defpoll time_poll :interval "1s" "date +%H:%M")
(defpoll battery_poll :interval "2s" "./scripts/get_battery_info.sh percentage")
(defpoll battery_icon_poll :interval "2s" "./scripts/get_battery_info.sh icon")
(defpoll volume_poll :interval "500ms" "./scripts/get_audio_info.sh volume")
(defpoll sound_icon_poll :interval "500ms" "./scripts/get_audio_info.sh icon")
(defpoll audio_tooltip :interval "1s" "./scripts/get_audio_info.sh tooltip")
(defpoll wifi_icon_poll :interval "5s" "./scripts/get_network_info.sh icon")
(defpoll network_tooltip :interval "5s" "./scripts/get_network_info.sh tooltip")

(deflisten workspaces_listen "./scripts/workspaces.sh")

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :space-evenly false
       :visible {visible ?: true}
    (label :class "icon-module__icon" :text "${icon}"))
    (children)))

;; Essential widgets only
(defwidget workspaces []
  (literal :content workspaces_listen))

(defwidget network []
  (label :class "network" 
         :text wifi_icon_poll
         :tooltip network_tooltip))

(defwidget speaker []
  (eventbox :onscroll "if [ '{}' = 'up' ]; then pamixer --decrease 1; else pamixer --increase 1; fi"
    (icon-module :class "speaker" :icon sound_icon_poll
      (label :text "${volume_poll}%" :tooltip audio_tooltip))))

(defwidget battery []
  (icon-module :class "battery" :icon battery_icon_poll
    (label :text "${battery_poll}")))

(defwidget time []
  (label :class "time" :text time_poll))

(defwidget power []
  (button :class "power" 
          :onclick "~/.config/rofi/powermenu/bin/powermenu.sh"
    (label :text "Û∞ê•")))

;; Minimal bar layout with centered time and power button
(defwidget bar []
  (centerbox :class "bar"
    (box :halign "start"
         :space-evenly false
      (workspaces))
    (time)
    (box :halign "end"
         :spacing 12
         :space-evenly false
      (network)
      (speaker)
      (battery)
      (power))))

;; Window definition
(defwindow bar
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top left" :x 0 :y 0 :width "100%")
  :reserve (struts :distance "10px" :side "top")
  (bar))
